#!/bin/bash

#
# Script is written to be run from the WORKSPACE root
#
set -eu
set -o pipefail
set -x

PROTOBUF_VERSION="3.19.1"
GRPC_VERSION="2.42.0"
PROTOBUF_FSHARP_VERSION="0.1.3"
GRPC_FSHARP_VERSION="0.1.5"
FSHARP_CORE_VERSION="5.0.1"

OUTPUT_DIR="$(pwd)/fsharp/nuget"
FILE_NAME="nuget.bzl"
TOOL="bazel run --host_platform=@io_bazel_rules_dotnet//dotnet/toolchain:linux_amd64_5.0.201 --platforms=@io_bazel_rules_dotnet//dotnet/toolchain:linux_amd64_5.0.201 @io_bazel_rules_dotnet//tools/nuget2bazel:nuget2bazel.exe --"

# Clear output files
if [ -f "${OUTPUT_DIR}/${FILE_NAME}" ]; then
    rm "${OUTPUT_DIR}/${FILE_NAME}"
fi
if [ -f "${OUTPUT_DIR}/nuget2config.json" ]; then
    rm "${OUTPUT_DIR}/nuget2config.json"
fi

# Build template
cat <<EOF > "${OUTPUT_DIR}/${FILE_NAME}"
load("@io_bazel_rules_dotnet//dotnet:defs.bzl", "dotnet_nuget_new", "nuget_package")

# Backwards compatibility definitions
def nuget_protobuf_packages():
    nuget_rules_proto_grpc_packages()

def nuget_grpc_packages():
    nuget_rules_proto_grpc_packages()

def no_op():
    # Function that does nothing, to be placeholder in below function. This prevents it being a
    # syntax error when nuget2bazel is first run
    pass

def nuget_rules_proto_grpc_packages():
    no_op()

    ### Generated by the tool
    ### End of generated by the tool
    dotnet_nuget_new(
        name = "grpc-fsharp",
        build_file_content = """
load("@io_bazel_rules_dotnet//dotnet:defs.bzl", "core_import_binary", "core_import_library")
core_import_library(
    name = "Protobuf.FSharp.dll",
    src = select(
        {
            "@io_bazel_rules_dotnet//dotnet/toolchain:3.1.100_config": "tools/netcoreapp3.1/any/Protobuf.FSharp.dll",
            "@io_bazel_rules_dotnet//dotnet/toolchain:3.1.407_config": "tools/netcoreapp3.1/any/Protobuf.FSharp.dll",
            "@io_bazel_rules_dotnet//dotnet/toolchain:5.0.201_config": "tools/net5.0/any/Protobuf.FSharp.dll",
        },
    ),
    version = "$PROTOBUF_FSHARP_VERSION",
    deps = [
        "@fsharp.core//:lib",
        "@google.protobuf//:lib",
    ],
)

core_import_binary(
    name = "bin",
    src = select(
        {
            "@io_bazel_rules_dotnet//dotnet/toolchain:3.1.100_config": "tools/netcoreapp3.1/any/FSharp.GrpcCodeGenerator.dll",
            "@io_bazel_rules_dotnet//dotnet/toolchain:3.1.407_config": "tools/netcoreapp3.1/any/FSharp.GrpcCodeGenerator.dll",
            "@io_bazel_rules_dotnet//dotnet/toolchain:5.0.201_config": "tools/net5.0/any/FSharp.GrpcCodeGenerator.dll",
        },
    ),
    deps = [":Protobuf.FSharp.dll"],
    version = "$GRPC_FSHARP_VERSION",
    visibility = ["//visibility:public"],
)
    """,
        package = "grpc-fsharp",
        version = "$GRPC_FSHARP_VERSION",
        sha256 = "f5577eaa2e092c739a9b92f9574461ae6839ee1c59c9c0129ef561a2ec2ff563",
    )
EOF

# Add deps
${TOOL} add --path "${OUTPUT_DIR}" --indent --bazelfile "${FILE_NAME}" Google.Protobuf "${PROTOBUF_VERSION}"
${TOOL} add --path "${OUTPUT_DIR}" --indent --bazelfile "${FILE_NAME}" Grpc "${GRPC_VERSION}"
${TOOL} add --path "${OUTPUT_DIR}" --indent --bazelfile "${FILE_NAME}" FSharp.Core "${FSHARP_CORE_VERSION}"
${TOOL} add --path "${OUTPUT_DIR}" --indent --bazelfile "${FILE_NAME}" Protobuf.FSharp "${PROTOBUF_FSHARP_VERSION}"
#${TOOL} add --path "${OUTPUT_DIR}" --indent --bazelfile "${FILE_NAME}" grpc-fsharp "${GRPC_FSHARP_VERSION}"

# Clear packages directory
if [ -d "${OUTPUT_DIR}/packages" ]; then
    rm -r "${OUTPUT_DIR}/packages"
fi

# Patch missing Grpc.Core runtimes into nuget_package
cat "${OUTPUT_DIR}/${FILE_NAME}" | python3 -c "import sys; patch = open('${OUTPUT_DIR}/${FILE_NAME}.patch').read(); sys.stdout.write(sys.stdin.read().replace('Grpc.Core.xml\",', 'Grpc.Core.xml\",' + patch))" | sponge "${OUTPUT_DIR}/${FILE_NAME}"

# Patch in buildifier fixes
cat "${OUTPUT_DIR}/${FILE_NAME}" | python3 -c "import sys; sys.stdout.write('\"\"\"Generated nuget packages\"\"\"\n\n' + sys.stdin.read().replace('def nuget_rules_proto_grpc_packages():', 'def nuget_rules_proto_grpc_packages():\n    \"\"\"Nuget packages\"\"\"'))" | sponge "${OUTPUT_DIR}/${FILE_NAME}"
